name: CI
on:
  # push:
  #   branches: [ main ]
  #   paths: .github/workflows/terraform-devops.yml
  # pull_request:
  #   branches:  none # [ main ] #

  workflow_dispatch:  
    inputs:
      environment:
        description: 'The env to deploy infra to'
        required: true
        default: 'dev'
  
env:
  STORAGE_ACCOUNT_NAME: ghatestdam${{ inputs.environment }}
  RESOURCE_GROUP_NAME: gha-test-sub-${{ inputs.environment }}
  CONTAINER_NAME: state
  BLOB_NAME: terraform-${{ inputs.environment }}.tfstate
  WORKING_DIRECTORY: github-deployment
  LOCATION: ukwest

permissions:
  id-token: write     # ‚Üê allows GitHub to mint an OIDC token
  contents: read      # ‚Üê still needed to check out your code
        
jobs:
  deploy-azure-infra-terraform:
    name: Deploy to Azure with Terraform
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
                
    - name: Login to Azure with Service Principal
      uses: Azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.12.1
    
    - name: Terraform Init
      id: init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: |
        terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
                       -backend-config="container_name=$CONTAINER_NAME" \
                       -backend-config="resource_group_name=$RESOURCE_GROUP_NAME" \
                       -backend-config="key=$BLOB_NAME"
  
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: format
      run: terraform fmt -check 

    - name: Terraform Plan
      id: plan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      if: github.event_name == 'workflow_dispatch' # 'pull_request' # 'push' # 
      run: |
        # terraform plan -no-color 
        terraform plan  -no-color \
                        -input=false \
                        -out "${{ inputs.environment }}-${{ github.run_number }}.tfplan" \
                        -var-file="tfvars/${{ inputs.environment }}.tfvars" 
        
        # show the tfplan file
        terraform show -json tfplan
        terraform show -json tfplan >> tfplan.json
        # Format tfplan.json file
        terraform show -json tfplan | jq '.' > tfplan.json
        
        # show only the changes
        cat tfplan.json | jq '[.resource_changes[] | {type: .type, name: .change.after.name, actions: .change.actions[]}]' 
        cat tfplan.json | jq -r '(.resource_changes[] | [.change.actions[], .type, .change.after.name]) | @tsv'

    - name: Add Terraform Plan Comment
      id: comment
      uses: actions/github-script@v6
      if: github.event_name == 'workflow_dispatch' # 'pull_request' # 'push'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.format.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
          <details><summary>Show Plan</summary>
          
          \`\`\`${process.env.PLAN}\`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
        
    # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: terraform apply -auto-approve

  
