name: CI
on:
  push:
    branches:
    - feature/basic_tf_bootstrap
  pull_request:
    branches:
    - main

  workflow_dispatch:  
    inputs:
      environment:
        description: 'The env to deploy infra to'
        required: true
        default: 'dev'
  
env:
  STORAGE_ACCOUNT_NAME: ghatestdam${{ inputs.environment }}
  RESOURCE_GROUP_NAME: gha-test-sub-${{ inputs.environment }}
  CONTAINER_NAME: state
  BLOB_NAME: terraform-${{ inputs.environment }}.tfstate
  WORKING_DIRECTORY: github-deployment
  LOCATION: ukwest

permissions:
  id-token: write     # ‚Üê allows GitHub to mint an OIDC token
  contents: read      # ‚Üê still needed to check out your code
        
jobs:
  deploy-azure-infra-terraform:
    name: Deploy to Azure with Terraform
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
                
    - name: Login to Azure with Service Principal
      uses: Azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.12.1
        terraform_wrapper: false    # <‚Äî disable the wrapper
    
    - name: Terraform Init
      id: init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: |
        terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
                       -backend-config="container_name=$CONTAINER_NAME" \
                       -backend-config="resource_group_name=$RESOURCE_GROUP_NAME" \
                       -backend-config="key=$BLOB_NAME"
    
        # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode \
                        -no-color  \
                        -out tfplan \
                        -var-file="tfvars/${{ inputs.environment }}.tfvars"  || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: tfplan
        
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
    # If this is a PR post the changes
    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/main'
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })


    # # Checks that all Terraform configuration files adhere to a canonical format
    # - name: Terraform Format
    #   id: format
    #   run: terraform fmt -check 

    # - name: Terraform Plan
    #   id: plan
    #   env:
    #     ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
    #     ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
    #     ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    #     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    #   if: github.event_name == 'workflow_dispatch' # 'pull_request' # 'push' # 
    #   run: |
    #     # terraform plan -no-color 
    #     terraform plan  -no-color \
    #                     -input=false \
    #                     -out "${{ inputs.environment }}-${{ github.run_number }}.tfplan" \
    #                     -var-file="tfvars/${{ inputs.environment }}.tfvars" 
    # - name: Add Terraform Plan Comment
    #   id: comment
    #   uses: actions/github-script@v6
    #   if: github.event_name == 'workflow_dispatch' # 'pull_request' # 'push'
    #   env:
    #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const output = `#### Terraform Format and Style üñå\`${{ steps.format.outcome }}\`
    #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #       #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
    #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
    #       <details><summary>Show Plan</summary>
          
    #       \`\`\`${process.env.PLAN}\`\`\`
          
    #       </details>
          
    #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })
        
    # # On push to main, build or change infrastructure according to Terraform configuration files
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   env:
    #     ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
    #     ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
    #     ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    #     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    #   run: terraform apply -auto-approve

  
