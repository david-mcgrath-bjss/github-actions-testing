name: 'Bootstrap Infra required to manage env with terrafrom'

on:
  workflow_dispatch:  
    inputs:
      environment:
        description: 'The env that we will bootstrap the infra for'
        required: true
        default: 'dev'
  
env:
  STORAGE_ACCOUNT_NAME: dmcgightesting${{ inputs.environment }}
  RESOURCE_GROUP_NAME: rg-terraform-state-${{ inputs.environment }}
  CONTAINER_NAME: tfstate-${{ inputs.environment }}
  BLOB_NAME: terraform-${{ inputs.environment }}.tfstate
  WORKING_DIRECTORY: github-deployment
  LOCATION: ukwest

permissions:
  id-token: write     # ← allows GitHub to mint an OIDC token
  contents: read      # ← still needed to check out your code

jobs:      
  deploy-azure-infra-terraform:
    name: Deploy to Azure with Terraform
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    # needs: [scan-terraform-config]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2.3.0
                
    - name: Login to Azure with Service Principal
      uses: Azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Create Terraform backend state storage
      uses: Azure/cli@v1.0.6
      with:
        # Azure CLI version to be used to execute the script. If not provided, latest version is used
        # azcliversion: 2.34.1 # optional, default is agentazcliversion
        inlineScript: |
          az version

          # Create resource group
          az group create --name $RESOURCE_GROUP_NAME --location $LOCATION
          
          # Create storage account
          az storage account create --name $STORAGE_ACCOUNT_NAME \
             --resource-group $RESOURCE_GROUP_NAME \
             --sku Standard_LRS \
             --encryption-services blob
          
          # Create blob container
          az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME
          
          # generate backend.tf file
          cd $WORKING_DIRECTORY
          cat <<EOT > backend.tf
          terraform {
            backend "azurerm" {
              resource_group_name   = "$RESOURCE_GROUP_NAME"
              storage_account_name  = "$STORAGE_ACCOUNT_NAME"
              container_name        = "$CONTAINER_NAME"
              key                   = "$BLOB_NAME"
            }
          }
          EOT
          
          cat backend.tf
